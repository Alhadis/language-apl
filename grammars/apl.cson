name: "APL"
scopeName: "source.apl"
fileTypes: ["apl", "dyalog"]
firstLineMatch: '^#!.*\\b(apl|dyalog)'
foldingStartMarker: '\\{'
foldingStopMarker:  '\\}'
patterns: [
	
	{ include: "#heredocs" }
	{ include: "#main"     }
	
	
	# Shebang
	{
		match: "\\A#!.*$"
		name:  "comment.line.shebang.apl"
	}
	
	
	# Brackets
	{
		name: "meta.round.bracketed.group.apl"
		patterns: [{include: "#main"}]
		begin: "\\("
		end:   "\\)"
		beginCaptures: {0: {name: "punctuation.round.bracket.begin.apl"}}
		endCaptures:   {0: {name: "punctuation.round.bracket.end.apl"}}
	}
	
	
	# Square brackets
	{
		name: "meta.square.bracketed.group.apl"
		patterns: [{include: "#main"}]
		begin: "\\["
		end:   "\\]"
		beginCaptures: {0: {name: "punctuation.square.bracket.begin.apl"}}
		endCaptures:   {0: {name: "punctuation.square.bracket.end.apl"}}
	}
	
	
	# System commands
	{
		name: "meta.system.command.apl"
		begin: "^\\s*(\\)\\S+)"
		end:   "$"
		beginCaptures:
			1: {name: "entity.name.command.apl"}
		patterns: [
			{ include: "#command-arguments" }
			{ include: "#command-switches"  }
			{ include: "#main" }
		]
	}
	
	
	# User commands
	{
		name: "meta.user.command.apl"
		begin: "^\\s*(\\]\\S+)"
		end:   "$"
		beginCaptures:
			1: {name: "entity.name.command.apl"}
		patterns: [
			{ include: "#command-arguments" }
			{ include: "#command-switches"  }
			{ include: "#main" }
		]
	}
]



repository:
	
	# Common patterns
	main: {
		patterns: [
			{ include: "#comment" }
			{ include: "#strings" }
			{ include: "#float"   }
			{ include: "#int"     }
			{ include: "#name"    }
			{ include: "#lambda"  }
			{ include: "#sysvars" }
			{ include: "#symbols" }
		]
	}
	
	
	# Comment-lines
	comment:
		name:  "comment.line.apl"
		begin: "⍝"
		end:   "$"
		captures:
			0: {name: "punctuation.definition.comment.apl"}
	
	
	# Floating-point numbers
	float: {
		patterns: [{
			name:  "constant.numeric.float.apl"
			match: '\\b(\\d+)(\\.)(\\d*([Ee]¯?\\d+)?)'
			captures:
				1: {name: "leading.decimal"}
				2: {name: "decimal.separator"}
				3: {name: "trailing.decimal"}
				4: {name: "exponential.decimal"}
		}, {
			name:  "constant.numeric.float.no-trailing-digits.apl"
			match: '\\b(\\d+)(\\.)(?!\\w)'
			captures:
				1: {name: "leading.decimal"}
				2: {name: "decimal.separator"}
		}, {
			name:  "constant.numeric.float.no-leading-digits.apl"
			match: '(?<!\\w)(\\.)(\\d+([Ee]¯?\\d+)?)'
			captures: {
				1: {name: "decimal.separator"}
				2: {name: "trailing.decimal"}
				3: {name: "exponential.decimal"}
			}
		}]
	}
	
	
	# Integers
	int: {
		patterns: [{
			name:  "constant.numeric.int.exponential.apl"
			match: '\\b\\d+[Ee]¯?\\d+'
		}, {
			name:  "constant.numeric.int.basic.apl"
			match: '\\b\\d+(?!\\.?[Ee][\\d¯])'
		}]
	}
	
	
	# String literals
	strings:
		patterns: [{
			name: "string.quoted.single.apl"
			begin: "'"
			end:   "'|$"
			beginCaptures:
				0: {name: "punctuation.definition.string.begin.apl"}
			endCaptures:
				0: {name: "punctuation.definition.string.end.apl"}
			patterns: [{
				match: "[^']*[^'\\n\\r\\\\]$"
				name: "invalid.illegal.string.apl"
			}]
		}, {
			name: "string.quoted.double.apl",
			begin: '"'
			end:   '"|$'
			beginCaptures:
				0: {name: "punctuation.definition.string.begin.apl"}
			endCaptures:
				0: {name: "punctuation.definition.string.end.apl"}
			patterns: [{
				match: '[^"]*[^"\\n\\r\\\\]$'
				name: "invalid.illegal.string.apl"
			}]
		}]

	
	# Names
	name:
		patterns: [{
			name: "storage.type.name.apl"
			match: "[A-Za-z∆⍙_]+[A-Za-z0-9∆⍙_¯]*"
		}]
	
	
	
	# Symbols
	symbols:
		patterns: [
			
			# APL functions (and hybrid operators)
			{match: "\\+",     name: "keyword.operator.plus.apl"}
			{match: "[-−]",    name: "keyword.operator.minus.apl"}
			{match: "×",       name: "keyword.operator.times.apl"}
			{match: "÷",       name: "keyword.operator.divide.apl"}
			{match: "⌊",       name: "keyword.operator.floor.apl"}
			{match: "⌈",       name: "keyword.operator.ceiling.apl"}
			{match: "[∣|]",    name: "keyword.operator.absolute.apl"}
			{match: "[⋆*]",    name: "keyword.operator.exponent.apl"}
			{match: "⍟",       name: "keyword.operator.logarithm.apl"}
			{match: "○",       name: "keyword.operator.circle.apl"}
			{match: "!",       name: "keyword.operator.factorial.apl"}
			{match: "∧",       name: "keyword.operator.and.apl"}
			{match: "∨",       name: "keyword.operator.or.apl"}
			{match: "⍲",       name: "keyword.operator.nand.apl"}
			{match: "⍱",       name: "keyword.operator.nor.apl"}
			{match: "<",       name: "keyword.operator.less.apl"}
			{match: "≤",       name: "keyword.operator.less-or-equal.apl"}
			{match: "=",       name: "keyword.operator.equal.apl"}
			{match: "≥",       name: "keyword.operator.greater-or-equal.apl"}
			{match: ">",       name: "keyword.operator.greater.apl"}
			{match: "≠",       name: "keyword.operator.not-equal.apl"}
			{match: "[∼~]",    name: "keyword.operator.tilde.apl"}
			{match: "\\?",     name: "keyword.operator.random.apl"}
			{match: "[∊∈]",    name: "keyword.operator.member-of.apl"}
			{match: "⍷",       name: "keyword.operator.find.apl"}
			{match: ",",       name: "keyword.operator.comma.apl"}
			{match: "⍪",       name: "keyword.operator.comma-bar.apl"}
			{match: "⌷",       name: "keyword.operator.squad.apl"}
			{match: "⍳",       name: "keyword.operator.iota.apl"}
			{match: "⍴",       name: "keyword.operator.rho.apl"}
			{match: "↑",       name: "keyword.operator.take.apl"}
			{match: "↓",       name: "keyword.operator.drop.apl"}
			{match: "⊣",       name: "keyword.operator.left.apl"}
			{match: "⊢",       name: "keyword.operator.right.apl"}
			{match: "⊤",       name: "keyword.operator.encode.apl"}
			{match: "⊥",       name: "keyword.operator.decode.apl"}
			{match: "\\/",     name: "keyword.operator.slash.apl"}
			{match: "⌿",       name: "keyword.operator.slash-bar.apl"}
			{match: "\\x5C",   name: "keyword.operator.backslash.apl"}
			{match: "⍀",       name: "keyword.operator.backslash-bar.apl"}
			{match: "⌽",       name: "keyword.operator.rotate-last.apl"}
			{match: "⊖",       name: "keyword.operator.rotate-first.apl"}
			{match: "⍉",       name: "keyword.operator.transpose.apl"}
			{match: "⍋",       name: "keyword.operator.grade-up.apl"}
			{match: "⍒",       name: "keyword.operator.grade-down.apl"}
			{match: "⌹",       name: "keyword.operator.quad-divide.apl"}
			{match: "≡",       name: "keyword.operator.identical.apl"}
			{match: "≢",       name: "keyword.operator.not-identical.apl"}
			{match: "⊂",       name: "keyword.operator.enclose.apl"}
			{match: "⊃",       name: "keyword.operator.pick.apl"}
			{match: "∩",       name: "keyword.operator.intersection.apl"}
			{match: "∪",       name: "keyword.operator.union.apl"}
			{match: "⍎",       name: "keyword.operator.hydrant.apl"}
			{match: "⍕",       name: "keyword.operator.thorn.apl"}
			
			
			# APL Operators
			{match: "¨",       name: "keyword.operator.each.apl"}
			{match: "⍤",       name: "keyword.operator.rank.apl"}
			{match: "⌸",       name: "keyword.operator.quad-equal.apl"}
			{match: "⍨",       name: "keyword.operator.commute.apl"}
			{match: "⍣",       name: "keyword.operator.power.apl"}
			{match: "\\.",     name: "keyword.operator.dot.apl"}
			{match: "∘",       name: "keyword.operator.jot.apl"}
			{match: "⍠",       name: "keyword.operator.quad-colon.apl"}
			{match: "&",       name: "keyword.operator.ampersand.apl"}
			{match: "⌶",       name: "keyword.operator.i-beam.apl"}
			
			
			# Other symbols
			{match: ";",       name: "keyword.operator.semicolon.apl"}
			{match: "¯",       name: "keyword.operator.high-minus.apl"}
			{match: "←",       name: "keyword.operator.assignment.apl"}
			{match: "→",       name: "keyword.control.goto.apl"}
			{match: "⍬",       name: "constant.language.zilde.apl"}
			{match: "⋄",       name: "keyword.operator.diamond.apl"}
			{match: "∇",       name: "keyword.control.nabla.apl"}
			{match: "⎕",       name: "keyword.operator.quad.apl"}
		]
	
	
	
	# Direct definition notation (Lambda functions)
	lambda:
		name: "meta.lambda.function.apl"
		begin: "\\{"
		end:   "\\}"
		beginCaptures: {0: {name: "punctuation.definition.lambda.begin.apl"}}
		endCaptures:   {0: {name: "punctuation.definition.lambda.end.apl"}}
		patterns: [
			{ include: "#main" }
			{ include: "#lambda-variables" }
		]
	
	
	# Special variables accessible within the body of a lambda function
	"lambda-variables":
		patterns: [
			{match: "[⍺⍶]", name: "variable.lambda.arguments.left.apl"}
			{match: "[⍵⍹]", name: "variable.lambda.arguments.right.apl"}
			{match: "χ",    name: "variable.lambda.arguments.axis.apl"}
			{match: "λ",    name: "variable.lambda.symbol.apl"}
		]
	
	
	# System variables
	sysvars:
		match: "(⎕)[A-Z]*"
		name: "support.system.variable.apl"
		captures:
			1: {name: "punctuation.definition.quad.apl"}
	
	
	# Command arguments
	"command-arguments":
		patterns: [{
			name: "variable.parameter.argument.apl"
			begin: "\\b(?=\\S)"
			end:   "\\b(?=\\s)"
			patterns: [{include: "#main"}]
		}]
	
	# Switches (Dyalog-specific feature)
	"command-switches":
		patterns: [{
			name: "variable.parameter.switch.apl"
			begin: "(?<=\\s)(-)([A-Za-z0-9∆⍙_]+[A-Za-z0-9∆⍙_¯]*)(=)"
			end:   "\\b(?=\\s)"
			beginCaptures:
				1: {name: "punctuation.delimiter.switch.apl"}
				2: {name: "entity.name.switch.apl"}
				3: {name: "punctuation.assignment.switch.apl"}
			patterns: [{include: "#main"}]
		}]
	
	
	# Heredocs (GNU APL)
	heredocs:
		patterns: [{
			
			# HTML
			name: "meta.heredoc.apl"
			begin: "^.*?⎕INP\\s+('|\")((?i).*?HTML?.*?)\\1.*$"
			end:   "^.*?\\2.*?$"
			beginCaptures: {0: {patterns: [{include: "#main"}]}}
			endCaptures:   {0: {name: "constant.other.apl"}}
			contentName: "text.embedded.html.basic"
			patterns: [
				{ include: "text.html.basic" }
				{ include: "#embedded-apl"   }
			]
			
		}, {
			
			# XML
			name: "meta.heredoc.apl"
			begin: "^.*?⎕INP\\s+('|\")((?i).*?(?:XML|XSLT|SVG|RSS).*?)\\1.*$"
			end:   "^.*?\\2.*?$"
			beginCaptures: {0: {patterns: [{include: "#main"}]}}
			endCaptures:   {0: {name: "constant.other.apl"}}
			contentName: "text.embedded.xml"
			patterns: [
				{ include: "text.xml"      }
				{ include: "#embedded-apl" }
			]
			
		}, {
			
			# CSS
			name: "meta.heredoc.apl"
			begin: "^.*?⎕INP\\s+('|\")((?i).*?(?:CSS|stylesheet).*?)\\1.*$"
			end:   "^.*?\\2.*?$"
			beginCaptures: {0: {patterns: [{include: "#main"}]}}
			endCaptures:   {0: {name: "constant.other.apl"}}
			contentName: "source.embedded.css"
			patterns: [
				{ include: "source.css"    }
				{ include: "#embedded-apl" }
			]
			
		}, {
			
			# JavaScript
			name: "meta.heredoc.apl"
			begin: "^.*?⎕INP\\s+('|\")((?i).*?(?:JS(?!ON)|(?:ECMA|J|Java).?Script).*?)\\1.*$"
			end:   "^.*?\\2.*?$"
			beginCaptures: {0: {patterns: [{include: "#main"}]}}
			endCaptures:   {0: {name: "constant.other.apl"}}
			contentName: "source.embedded.js"
			patterns: [
				{ include: "source.js"     }
				{ include: "#embedded-apl" }
			]
			
		}, {
			
			# JSON
			name: "meta.heredoc.apl"
			begin: "^.*?⎕INP\\s+('|\")((?i).*?(?:JSON).*?)\\1.*$"
			end:   "^.*?\\2.*?$"
			beginCaptures: {0: {patterns: [{include: "#main"}]}}
			endCaptures:   {0: {name: "constant.other.apl"}}
			contentName: "source.embedded.json"
			patterns: [
				{ include: "source.json"   }
				{ include: "#embedded-apl" }
			]
		}, {
			
			# Raw text
			name: "meta.heredoc.apl"
			begin: "^.*?⎕INP\\s+('|\")(?i)((?:Raw|Plain)?\\s*Te?xt)\\1.*$"
			end:   "^.*?\\2.*?$"
			beginCaptures: {0: {patterns: [{include: "#main"}]}}
			endCaptures:   {0: {name: "constant.other.apl"}}
			patterns: [{ include: "#embedded-apl" }]
		}]

	
	
	# Embedded APL sequences (for GNU APL heredocs)
	"embedded-apl":
		patterns: [{
			name: "meta.embedded.block.apl"
			begin: "(?i)(<(\\?|%)(?:apl(?=\\s+)|=))"
			end:   "(?<=\\s)(\\2>)"
			patterns: [{include: "#main"}]
			beginCaptures:
				1: {name: "punctuation.section.embedded.begin.apl"}
			endCaptures:
				1: {name: "punctuation.section.embedded.end.apl"}
		}]
